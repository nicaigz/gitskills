git命令记录：

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

git init

cd到一个目录下，把此目录初始化成一个git的版本库；此目录可以为空，也可以为已有文件的项目


git add readme.txt

把readme.txt文件添加到暂存区


git commit -m "提交时需要说明的内容"

把已经add到暂存区的文件提交到master分支


初始化一个Git仓库，使用git init命令。

添加文件到Git仓库，分两步：

第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；

第二步，使用命令git commit，完成。
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

git status

查看目前的git的状态；

$ git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#       modified:   readme.txt
已经把readme.txt的一次修改add到暂存区，等待提交
#
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#       modified:   readme.txt
#
还没有把readme.txt的最后一次修改添加到暂存区


要随时掌握工作区的状态，使用git status命令。

如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

git log --pretty=oneline

git log命令显示从最近到最远的提交日


$ git reflog
1d2225e HEAD@{0}: reset: moving to HEAD~
086163d HEAD@{1}: reset: moving to HEAD~
6180d70 HEAD@{2}: commit: delete nicai
086163d HEAD@{3}: commit: append nicai
1d2225e HEAD@{4}: commit: readme.txt
2d56a50 HEAD@{5}: commit: add something
50b0818 HEAD@{6}: commit (initial): add readme.txt

git reflog命令记录所有的commit和reset的操作




---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
git reset --hard HEAD~  把版本库还原到上个版本

git reset --hard 6180d70  把版本库还原到某个特定commitid的版本

get reset命令带--hard和不带--hard的区别：
带--hard命令，本地文件和在master分支上的文件完全一样
不带--hard命令，本地文件不变，只更改master分支上的文件

在Git中，用HEAD表示当前版本，一个版本就是HEAD^，上上一个版本就是HEAD^^，
当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。


HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
提交后，用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别

$ git diff HEAD~ -- readme.txt  

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
git checkout -- readme.txt
命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

总之，就是让这个文件回到最近一次git commit或git add时的状态。

git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。

git reset HEAD readme.txt 撤销已经add到暂存区的readme.txt文件


场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
git rm test.txt

命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。

工作区有test.txt，执行git rm test.txt之后工作区的test.txt会被删除，但是只要不提交master分支上的test.txt文件就不会被删除，执行git commit之后，master分支上的文件也被删除


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
git branch -b dev #新建一个dev分支，并且切换到dev分支

git checkout master #切换到master分支

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
xixi test
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
